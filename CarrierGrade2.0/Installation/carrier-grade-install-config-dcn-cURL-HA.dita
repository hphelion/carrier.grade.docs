<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" >
<topic xml:lang="en-us" id="topic10581cgicd">
  <title>HP Helion <tm tmtype="reg">OpenStack</tm> Carrier Grade 2.0: cURL script for a High
    Availability Environment</title>
  <prolog>
    <metadata>
      <othermeta name="layout" content="default"/>
      <othermeta name="product-version" content="HP Helion OpenStack Carrier Grade 2.0"/>
      <othermeta name="role" content="Storage Administrator"/>
      <othermeta name="role" content="Storage Architect"/>
      <othermeta name="role" content="Michael B"/>
      <othermeta name="product-version1" content="HP Helion OpenStack Carrier Grade 2.0"/>
    </metadata>
  </prolog>
  <body>
    <section>
      <p>The following is the cURL script to enable floating IPs on the VRS-G during the <xref
        href="carrier-grade-install-config-dcn.dita#topic10581cgicdha">Configuring Your Cloud with DCN VSD</xref> procedures. </p>
      <ol id="ol_ks4_zhj_1t">
        <li>Copy the code from one of the following pages to a new file on the lifecycle manager
          host. <ul id="ul_vxf_nzw_q5">
            <li>
              <p>For a <xref href="carrier-grade-install-config-dcn-cURL-HA.dita#topic10581cgicd"
                  >cURL script for a high availability environment</xref></p>
            </li>
            <li>
              <p>For a <xref href="carrier-grade-install-config-dcn-cUR.dita#topic10581cgicd">cURL
                  script for a non-high availability environment</xref>.</p>
            </li>
          </ul></li>
        <li>Save the file to any name with the <codeph>.sh</codeph> file type. For example:
            <codeph>curl.sh</codeph>.</li>
        <li>Modify the cURL script for your environment:<ul id="ul_bzs_r1c_1t">
            <li>FIP_NAME is the one that is retrieved from previous step.</li>
            <li>GW_NAME is the redundant gateway name.</li>
            <li>All the UPLINK info are from the core switch on their specific testbed</li>
          </ul><p>
            <codeblock>#!/bin/bash
set -x
#
# Starting with VSP 3.0R2, there is an officially supported way to enable FIP using
# a VSG or VRS-G uplink port
#

# Parameters
VLAN="107"
VSD_IP="10.10.4.21"
FIP_NAME="tb1_fip1" # unique name show in VSD created for external network floating ip pool
#FIP_NAME="3aa23ffa-7530-46eb-ab3b-eff9fe65b0f6" # unique name show in VSD created for external network floating ip pool
GW_NAME="TB1-VRSG-Cluster" # use the ip of the VRSG node created on VSD / VSC
PORT_NAME="eth0" # pyshical nic use don VRSG node for trunk/ tagged external trafic

#
# IANA has reserved 192.0.0.0/29 for DS-lite transition
#
UPLINK_SUBNET="10.10.7.0"
UPLINK_MASK="255.255.255.192"
VRSG_IP="10.10.7.2"  #DUncan Modified :P
UPLINK_GW="10.10.7.1"                         # ROUTER IP ON SWITCH main switch 10.1.64.21
UPLINK_GW_MAC="bc:ea:fa:1d:b0:80"       # VLAN 1209 MAC address not VRSG is from main switch 10.1.64.21
if [ $# -eq 1 ]; then # remote install
echo "Performing remote install to root@'$1' (requires PermitRootLogin=yes in sshd config)..."
ssh root@$1 'bash -s ' &lt; $0
exit 0
elif [ $# -ne 0  ]; then
cat &lt;&lt;END
Usage (as root) $0 [remote IP]
END
exit -1
fi

# Install required software packages, if not already
if [ -e /usr/bin/yum ]; then
[[ `which jq` != "" ]] || yum install -y jq
QEMU_KVM="/usr/libexec/qemu-kvm"
QEMU_USR="qemu:qemu"
LIBVIRTD="libvirtd"
else
[[ `which jq` != "" ]] || apt-get install -y jq
QEMU_KVM="/usr/bin/kvm"
QEMU_USR="libvirt-qemu:kvm"
LIBVIRTD="libvirt-bin"
fi

# Determine Domain name for the Floating IP pool ( based on pool name )
APIKEY=`curl -ks -H "X-Nuage-Organization: csp" -H "Content-Type: application/json" -H "Authorization: XREST Y3Nwcm9vdDpjc3Byb290" https://$VSD_IP:8443/nuage/api/v3_0/me | jq -r '.[0].APIKey'`
TOKEN=`echo -n "csproot:$APIKEY" | base64`
ZONE_ID=`curl -ks -H "X-Nuage-Organization: CSP" -H "X-Nuage-Filter: name=='$FIP_NAME'" -H "Content-Type: application/json" -H "Authorization: XREST $TOKEN" \
https://$VSD_IP:8443/nuage/api/v3_0/sharednetworkresources | jq -r '.[0].parentID'`
if [ "$ZONE_ID" == "" ]; then
echo "Error: Floating IP pool named '$FIP_NAME' not found"
exit 1
fi

# Lookup VLAN to use
GW_ID=`curl -ks -H "X-Nuage-Filter: name=='$GW_NAME'" -H "X-Nuage-Organization: CSP" -H "Content-Type: application/json" -H "Authorization: XREST $TOKEN" \
https://$VSD_IP:8443/nuage/api/v3_0/redundancygroups | jq -r '.[0].ID'`
PORT_ID=`curl -ks -H "X-Nuage-Filter: name=='$PORT_NAME'" -H "X-Nuage-Organization: CSP" -H "Content-Type: application/json" -H "Authorization: XREST $TOKEN" \
https://$VSD_IP:8443/nuage/api/v3_0/redundancygroups/$GW_ID/ports | jq -r '.[0].ID'`
VLAN_ID=`curl -ks -H "X-Nuage-Filter: value==$VLAN" -H "X-Nuage-Organization: CSP" -H "Content-Type: application/json" -H "Authorization: XREST $TOKEN" \
https://$VSD_IP:8443/nuage/api/v3_0/ports/$PORT_ID/vlans | jq -r '.[0].ID'`
if [ "$VLAN_ID" == "" ]; then
echo "Error: VLAN on redundancygroup '$GW_NAME' with port '$PORT_NAME' and value '$VLAN' not found"
exit 1
fi
echo "VLAN $VLAN ID: $VLAN_ID"

# Get/Create uplink subnet
SUBNET_ID=`curl -ks -H "X-Nuage-Filter: type=='UPLINK_SUBNET'" -H "X-Nuage-Organization: CSP" -H "Content-Type: application/json" \
-H "Authorization: XREST $TOKEN" https://$VSD_IP:8443/nuage/api/v3_0/sharednetworkresources | jq -r '.[0].ID'`
if [ "$SUBNET_ID" == "" ]; then
echo "Creating new FIP uplink subnet in ZONE $ZONE_ID"
curl -ks -H "X-Nuage-Organization: CSP" -H "Content-Type: application/json" -H "Authorization: XREST $TOKEN" \
https://$VSD_IP:8443/nuage/api/v3_0/sharednetworkresources -d "{ \
        \"name\": \"FIP uplink subnet\", \
    \"description\": \"uplink subnet\", \
    \"address\": \"$UPLINK_SUBNET\", \
    \"netmask\": \"$UPLINK_MASK\", \
    \"gateway\": \"$VRSG_IP\", \
    \"type\": \"UPLINK_SUBNET\", \
    \"uplinkInterfaceIP\" : \"$UPLINK_GW\", \
    \"uplinkInterfaceMAC\" : \"$UPLINK_GW_MAC\", \
    \"sharedResourceParentID\" : \"$ZONE_ID\", \
    \"uplinkGWVlanAttachmentID\" : \"$VLAN_ID\", \
    \"uplinkVPortName\" : \"uplink vport1\" \
}"
else
echo "FIP uplink subnet already exists: $SUBNET_ID"
fi</codeblock>
          </p></li>
        <li>Save and close the script.</li>
      </ol>
    </section>
    <p>Return to <xref href="carrier-grade-install-config-dcn.dita#topic10581cgicd/curl">Run a cURL
        script to enable floating IPs on the VRS-G</xref>.</p>
  </body>
</topic>
